version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: salary-app-prod
    restart: unless-stopped
    working_dir: /var/www/
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    volumes:
      - app-storage:/var/www/storage
      - app-logs:/var/www/storage/logs
    networks:
      - salary-network
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "php", "artisan", "health:check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  webserver:
    image: nginx:alpine
    container_name: salary-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./storage/app/public:/var/www/storage/app/public:ro
      - nginx-logs:/var/log/nginx
      # SSL certificates (mount your certificates here)
      # - /path/to/ssl/certs:/etc/ssl/certs:ro
      # - /path/to/ssl/private:/etc/ssl/private:ro
    networks:
      - salary-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: mysql:8.0
    container_name: salary-db-prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    volumes:
      - dbdata:/var/lib/mysql
      - db-logs:/var/log/mysql
      - ./docker/mysql/prod.cnf:/etc/mysql/conf.d/prod.cnf:ro
    networks:
      - salary-network
    command: --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=512M
      --innodb-log-file-size=128M
      --max-connections=500
      --query-cache-size=64M
      --query-cache-type=1
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
      --general-log=1
      --general-log-file=/var/log/mysql/general.log
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: salary-redis-prod
    restart: unless-stopped
    volumes:
      - redisdata:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - salary-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Application monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: salary-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - salary-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Backup service
  backup:
    image: alpine:latest
    container_name: salary-backup-prod
    restart: "no"
    volumes:
      - dbdata:/backup/db:ro
      - app-storage:/backup/storage:ro
      - ./docker/backup/backup.sh:/backup.sh:ro
    networks:
      - salary-network
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    command: /bin/sh -c "apk add --no-cache mysql-client && /backup.sh"

networks:
  salary-network:
    driver: bridge

volumes:
  dbdata:
    driver: local
  redisdata:
    driver: local
  app-storage:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  db-logs:
    driver: local
  prometheus-data:
    driver: local